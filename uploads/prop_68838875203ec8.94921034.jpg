{"version":3,"sources":["webpack:///./node_modules/buffer-xor/index.js","webpack:///./node_modules/buffer/index.js","webpack:///./node_modules/buffer/node_modules/isarray/index.js","webpack:///./node_modules/call-bind/callBound.js","webpack:///./node_modules/call-bind/index.js"],"names":["Buffer","module","exports","a","b","length","Math","min","buffer","i","global","base64","__webpack_require__","ieee754","isArray","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","Uint8Array","__proto__","prototype","arg","encodingOrOffset","this","Error","allocUnsafe","from","value","TypeError","ArrayBuffer","array","byteOffset","byteLength","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","slice","fromString","obj","isBuffer","len","checked","copy","val","type","data","fromObject","assertSize","size","toString","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","n","m","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","call","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","buf","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","push","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","c","hi","lo","utf16leToBytes","base64Slice","start","end","fromByteArray","utf8Slice","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","e","typedArraySupport","poolSize","_augment","Symbol","species","Object","defineProperty","configurable","fill","allocUnsafeSlow","_isBuffer","compare","x","y","concat","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","max","match","join","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","Array","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","GetIntrinsic","callBind","$indexOf","name","allowMissing","intrinsic","bind","$apply","$call","$reflectApply","$gOPD","$defineProperty","$max","originalFunction","func","applyBind"],"mappings":"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","file":"45.aa6b8c6e7e10d8e6c89e.js","sourcesContent":["module.exports = function xor (a, b) {\n  var length = Math.min(a.length, b.length)\n  var buffer = new Buffer(length)\n\n  for (var i = 0; i < length; ++i) {\n    buffer[i] = a[i] ^ b[i]\n  }\n\n  return buffer\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBind = require('./');\n\nvar $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));\n\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\tvar intrinsic = GetIntrinsic(name, !!allowMissing);\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBind(intrinsic);\n\t}\n\treturn intrinsic;\n};\n","'use strict';\n\nvar bind = require('function-bind');\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\nvar $max = GetIntrinsic('%Math.max%');\n\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = null;\n\t}\n}\n\nmodule.exports = function callBind(originalFunction) {\n\tvar func = $reflectApply(bind, $call, arguments);\n\tif ($gOPD && $defineProperty) {\n\t\tvar desc = $gOPD(func, 'length');\n\t\tif (desc.configurable) {\n\t\t\t// original length, plus the receiver, minus any additional arguments (after the receiver)\n\t\t\t$defineProperty(\n\t\t\t\tfunc,\n\t\t\t\t'length',\n\t\t\t\t{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }\n\t\t\t);\n\t\t}\n\t}\n\treturn func;\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n"],"sourceRoot":"","x_microsoft_symbol_client_key":"f1ba67a05a4748d07eba0f081380f77418157086035462e071356b81d857939a"}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    // Lists

'use strict';

var isSpace = require('../common/utils').isSpace;


// Search `[-+*][\n ]`, returns next pos after marker on success
// or -1 on fail.
function skipBulletListMarker(state, startLine) {
  var marker, pos, max, ch;

  pos = state.bMarks[startLine] + state.tShift[startLine];
  max = state.eMarks[startLine];

  marker = state.src.charCodeAt(pos++);
  // Check bullet
  if (marker !== 0x2A/* * */ &&
      marker !== 0x2D/* - */ &&
      marker !== 0x2B/* + */) {
    return -1;
  }

  if (pos < max) {
    ch = state.src.charCodeAt(pos);

    if (!isSpace(ch)) {
      // " -test " - is not a list item
      return -1;
    }
  }

  return pos;
}

// Search `\d+[.)][\n ]`, returns next pos after marker on success
// or -1 on fail.
function skipOrderedListMarker(state, startLine) {
  var ch,
      start = state.bMarks[startLine] + state.tShift[startLine],
      pos = start,
      max = state.eMarks[startLine];

  // List marker should have at least 2 chars (digit + dot)
  if (pos + 1 >= max) { return -1; }

  ch = state.src.charCodeAt(pos++);

  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }

  for (;;) {
    // EOL -> fail
    if (pos >= max) { return -1; }

    ch = state.src.charCodeAt(pos++);

    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {

      // List marker should have no more than 9 digits
      // (prevents integer overflow in browsers)
      if (pos - start >= 10) { return -1; }

      continue;
    }

    // found valid marker
    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {
      break;
    }

    return -1;
  }


  if (pos < max) {
    ch = state.src.charCodeAt(pos);

    if (!isSpace(ch)) {
      // " 1.test " - is not a list item
      return -1;
    }
  }
  return pos;
}

function markTightParagraphs(state, idx) {
  var i, l,
      level = state.level + 2;

  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
      state.tokens[i + 2].hidden = true;
      state.tokens[i].hidden = true;
      i += 2;
    }
  }
}


module.exports = function list(state, startLine, endLine, silent) {
  var ch,
      contentStart,
      i,
      indent,
      indentAfterMarker,
      initial,
      isOrdered,
      itemLines,
      l,
      listLines,
      listTokIdx,
      markerCharCode,
      markerValue,
      max,
      nextLine,
      offset,
      oldListIndent,
      oldParentType,
      oldSCount,
      oldTShift,
      oldTight,
      pos,
      posAfterMarker,
      prevEmptyEnd,
      start,
      terminate,
      terminatorRules,
      token,
      isTerminatingParagraph = false,
      tight = true;

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  // Special case:
  //  - item 1
  //   - item 2
  //    - item 3
  //     - item 4
  //      - this one is a paragraph continuation
  if (state.listIndent >= 0 &&
      state.sCount[startLine] - state.listIndent >= 4 &&
      state.sCount[startLine] < state.blkIndent) {
    return false;
  }

  // limit conditions when list can interrupt
  // a paragraph (validation mode only)
  if (silent && state.parentType === 'paragraph') {
    // Next list item should still terminate previous list item;
    //
    // This code can fail if plugins use blkIndent as well as lists,
    // but I hope the spec gets fixed long before that happens.
    //
    if (state.sCount[startLine] >= state.blkIndent) {
      isTerminatingParagraph = true;
    }
  }

  // Detect list type and position after marker
  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
    isOrdered = true;
    start = state.bMarks[startLine] + state.tShift[startLine];
    markerValue = Number(state.src.slice(start, posAfterMarker - 1));

    // If we're starting a new ordered list right after
    // a paragraph, it should start with 1.
    if (isTerminatingParagraph && markerValue !== 1) return false;

  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
    isOrdered = false;

  } else {
    return false;
  }

  // If we're starting a new unordered list right after
  // a paragraph, first line should not be empty.
  if (isTerminatingParagraph) {
    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;
  }

  // We should terminate list on style change. Remember first one to compare.
  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);

  // For validation mode we can terminate immediately
  if (silent) { return true; }

  // Start list
  listTokIdx = state.tokens.length;

  if (isOrdered) {
    token       = state.push('ordered_list_open', 'ol', 1);
    if (markerValue !== 1) {
      token.attrs = [ [ 'start', markerValue ] ];
    }

  } else {
    token       = state.push('bullet_list_open', 'ul', 1);
  }

  token.map    = listLines = [ startLine, 0 ];
  token.markup = String.fromCharCode(markerCharCode);

  //
  // Iterate list items
  //

  nextLine = startLine;
  prevEmptyEnd = false;
  terminatorRules = state.md.block.ruler.getRules('list');

  oldParentType = state.parentType;
  state.parentType = 'list';

  while (nextLine < endLine) {
    pos = posAfterMarker;
    max = state.eMarks[nextLine];

    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);

    while (pos < max) {
      ch = state.src.charCodeAt(pos);

      if (ch === 0x09) {
        offset += 4 - (offset + state.bsCount[nextLine]) % 4;
      } else if (ch === 0x20) {
        offset++;
      } else {
        break;
      }

      pos++;
    }

    contentStart = pos;

    if (contentStart >= max) {
      // trimming space in "-    \n  3" case, indent is 1 here
      indentAfterMarker = 1;
    } else {
      indentAfterMarker = offset - initial;
    }

    // If we have more than 4 spaces, the indent is 1
    // (the rest is just indented code block)
    if (indentAfterMarker > 4) { indentAfterMarker = 1; }

    // "  -  test"
    //  ^^^^^ - calculating total length of this thing
    indent = initial + indentAfterMarker;

    // Run subparser & write tokens
    token        = state.push('list_item_open', 'li', 1);
    token.markup = String.fromCharCode(markerCharCode);
    token.map    = itemLines = [ startLine, 0 ];
    if (isOrdered) {
      token.info = state.src.slice(start, posAfterMarker - 1);
    }

    // change current state, then restore it after parser subcall
    oldTight = state.tight;
    oldTShift = state.tShift[startLine];
    oldSCount = state.sCount[startLine];

    //  - example list
    // ^ listIndent position will be here
    //   ^