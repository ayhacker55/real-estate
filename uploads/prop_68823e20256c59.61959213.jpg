7" +
    "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x03\x02\x03\x02\x03\x02" +
    "\x03\x03\x03\x03\x03\x03\x03\x03\x05\x03\x1E\n\x03\x03\x03\x03\x03\x03" +
    "\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
    "\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
    "\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
    "\x03\x03\x03\x03\x03\x03\x03\x07\x03A\n\x03\f\x03\x0E\x03D\v\x03\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04M\n\x04\x03\x04" +
    "\x03\x04\x03\x04\x05\x04R\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x05\x04Y\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04`\n\x04" +
    "\x03\x04\x03\x04\x05\x04d\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x07\x04l\n\x04\f\x04\x0E\x04o\v\x04\x03\x05\x03\x05\x03\x05\x03" +
    "\x05\x07\x05u\n\x05\f\x05\x0E\x05x\v\x05\x03\x05\x03\x05\x03\x06\x06\x06" +
    "}\n\x06\r\x06\x0E\x06~\x03\x07\x03\x07\x05\x07\x83\n\x07\x03\x07\x03\x07" +
    "\x03\x07\x05\x07\x88\n\x07\x07\x07\x8A\n\x07\f\x07\x0E\x07\x8D\v\x07\x03" +
    "\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x07\t\x96\n\t\f\t\x0E\t\x99\v\t" +
    "\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x02\x02\x04\x04\x06\f\x02\x02" +
    "\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x02" +
    "\b\x03\x02\x04\x06\x03\x02\b\n\x03\x02\x04\x05\x03\x02\v\f\x03\x02\x10" +
    "\x13\x04\x02\"\"$$\x02\xB6\x02\x16\x03\x02\x02\x02\x04\x1D\x03\x02\x02" +
    "\x02\x06X\x03\x02\x02\x02\bp\x03\x02\x02\x02\n|\x03\x02\x02\x02\f\x82" +
    "\x03\x02\x02\x02\x0E\x8E\x03\x02\x02\x02\x10\x92\x03\x02\x02\x02\x12\x9A" +
    "\x03\x02\x02\x02\x14\x9E\x03\x02\x02\x02\x16\x17\x05\x04\x03\x02\x17\x18" +
    "\x07\x02\x02\x03\x18\x03\x03\x02\x02\x02\x19\x1A\b\x03\x01\x02\x1A\x1B" +
    "\t\x02\x02\x02\x1B\x1E\x05\x04\x03\x0E\x1C\x1E\x05\x06\x04\x02\x1D\x19" +
    "\x03\x02\x02\x02\x1D\x1C\x03\x02\x02\x02\x1EB\x03\x02\x02\x02\x1F \f\r" +
    "\x02\x02 !\x07\x07\x02\x02!A\x05\x04\x03\r\"#\f\f\x02\x02#$\t\x03\x02" +
    "\x02$A\x05\x04\x03\r%&\f\v\x02\x02&\'\t\x04\x02\x02\'A\x05\x04\x03\f(" +
    ")\f\n\x02\x02)*\t\x05\x02\x02*A\x05\x04\x03\v+,\f\t\x02\x02,-\x07\r\x02" +
    "\x02-A\x05\x04\x03\n./\f\b\x02\x02/0\t\x06\x02\x020A\x05\x04\x03\t12\f" +
    "\x07\x02\x0223\x07\x0E\x02\x023A\x05\x04\x03\b45\f\x06\x02\x0256\x07\x0F" +
    "\x02\x026A\x05\x04\x03\x0778\f\x05\x02\x0289\x07\x1E\x02\x029A\x05\x04" +
    "\x03\x06:;\f\x04\x02\x02;<\x07\x1F\x02\x02<=\x05\x04\x03\x02=>\x07\x1C" +
    "\x02\x02>?\x05\x04\x03\x05?A\x03\x02\x02\x02@\x1F\x03\x02\x02\x02@\"\x03" +
    "\x02\x02\x02@%\x03\x02\x02\x02@(\x03\x02\x02\x02@+\x03\x02\x02\x02@.\x03" +
    "\x02\x02\x02@1\x03\x02\x02\x02@4\x03\x02\x02\x02@7\x03\x02\x02\x02@:\x03" +
    "\x02\x02\x02AD\x03\x02\x02\x02B@\x03\x02\x02\x02BC\x03\x02\x02\x02C\x05" +
    "\x03\x02\x02\x02DB\x03\x02\x02\x02EF\b\x04\x01\x02FG\x07\x14\x02\x02G" +
    "H\x05\x04\x03\x02HI\x07\x15\x02\x02IY\x03\x02\x02\x02JL\x07\x17\x02\x02" +
    "KM\x05\f\x07\x02LK\x03\x02\x02\x02LM\x03\x02\x02\x02MN\x03\x02\x02\x02" +
    "NY\x07\x18\x02\x02OQ\x07\x19\x02\x02PR\x05\x10\t\x02QP\x03\x02\x02\x02" +
    "QR\x03\x02\x02\x02RS\x03\x02\x02\x02SY\x07\x1A\x02\x02TY\x07 \x02\x02" +
    "UY\x07$\x02\x02VY\x07\"\x02\x02WY\x05\b\x05\x02XE\x03\x02\x02\x02XJ\x03" +
    "\x02\x02\x02XO\x03\x02\x02\x02XT\x03\x02\x02\x02XU\x03\x02\x02\x02XV\x03" +
    "\x02\x02\x02XW\x03\x02\x02\x02Ym\x03\x02\x02\x02Z[\f\x05\x02\x02[\\\x07" +
    "\x16\x02\x02\\l\x07\"\x02\x02]_\f\x04\x02\x02^`\x07\x06\x02\x02_^\x03" +
    "\x02\x02\x02_`\x03\x02\x02\x02`a\x03\x02\x02\x02ac\x07\x14\x02\x02bd\x05" +
    "\f\x07\x02cb\x03\x02\x02\x02cd\x03\x02\x02\x02de\x03\x02\x02\x02el\x07" +
    "\x15\x02\x02fg\f\x03\x02\x02gh\x07\x17\x02\x02hi\x05\x04\x03\x02ij\x07" +
    "\x18\x02\x02jl\x03\x02\x02\x02kZ\x03\x02\x02\x02k]\x03\x02\x02\x02kf\x03" +
    "\x02\x02\x02lo\x03\x02\x02\x02mk\x03\x02\x02\x02mn\x03\x02\x02\x02n\x07" +
    "\x03\x02\x02\x02om\x03\x02\x02\x02pv\x07\x03\x02\x02qu\x07\'\x02\x02r" +
    "u\x07&\x02\x02su\x05\n\x06\x02tq\x03\x02\x02\x02tr\x03\x02\x02\x02ts\x03" +
    "\x02\x02\x02ux\x03\x02\x02\x02vt\x03\x02\x02\x02vw\x03\x02\x02\x02wy\x03" +
    "\x02\x02\x02xv\x03\x02\x02\x02yz\x07\x03\x02\x02z\t\x03\x02\x02\x02{}" +
    "\x07(\x02\x02|{\x03\x02\x02\x02}~\x03\x02\x02\x02~|\x03\x02\x02\x02~\x7F" +
    "\x03\x02\x02\x02\x7F\v\x03\x02\x02\x02\x80\x83\x05\x0E\b\x02\x81\x83\x05" +
    "\x04\x03\x02\x82\x80\x03\x02\x02\x02\x82\x81\x03\x02\x02\x02\x83\x8B\x03" +
    "\x02\x02\x02\x84\x87\x07\x1B\x02\x02\x85\x88\x05\x0E\b\x02\x86\x88\x05" +
    "\x04\x03\x02\x87\x85\x03\x02\x02\x02\x87\x86\x03\x02\x02\x02\x88\x8A\x03" +
    "\x02\x02\x02\x89\x84\x03\x02\x02\x02\x8A\x8D\x03\x02\x02\x02\x8B\x89\x03" +
    "\x02\x02\x02\x8B\x8C\x03\x02\x02\x02\x8C\r\x03\x02\x02\x02\x8D\x8B\x03" +
    "\x02\x02\x02\x8E\x8F\x07\"\x02\x02\x8F\x90\x07\x1D\x02\x02\x90\x91\x05" +
    "\x04\x03\x02\x91\x0F\x03\x02\x02\x02\x92\x97\x05\x12\n\x02\x93\x94\x07" +
    "\x1B\x02\x02\x94\x96\x05\x12\n\x02\x95\x93\x03\x02\x02\x02\x96\x99\x03" +
    "\x02\x02\x02\x97\x95\x03\x02\x02\x02\x97\x98\x03\x02\x02\x02\x98\x11\x03" +
    "\x02\x02\x02\x99\x97\x03\x02\x02\x02\x9A\x9B\x05\x14\v\x02\x9B\x9C\x07" +
    "\x1C\x02\x02\x9C\x9D\x05\x04\x03\x02\x9D\x13\x03\x02\x02\x02\x9E\x9F\t" +
    "\x07\x02\x02\x9F\x15\x03\x02\x02\x02\x13\x1D@BLQX_ckmtv~\x82\x87\x8B\x97";
exports.ExpressionAntlrParser = ExpressionAntlrParser;
class FileContext extends ParserRuleContext_1.ParserRuleContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    EOF() { return this.getToken(ExpressionAntlrParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ExpressionAntlrParser.RULE_file; }
    // @Override
    enterRule(listener) {
        if (listener.enterFile) {
            listener.enterFile(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFile) {
            listener.exitFile(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFile) {
            return visitor.visitFile(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FileContext = FileContext;
class ExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ExpressionAntlrParser.RULE_expression; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
exports.ExpressionContext = ExpressionContext;
class UnaryOpExpContext extends ExpressionContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    NON() { return this.tryGetToken(ExpressionAntlrParser.NON, 0); }
    SUBSTRACT() { return this.tryGetToken(ExpressionAntlrParser.SUBSTRACT, 0); }
    PLUS() { return this.tryGetToken(ExpressionAntlrParser.PLUS, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterUnaryOpExp) {
            listener.enterUnaryOpExp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUnaryOpExp) {
            listener.exitUnaryOpExp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUnaryOpExp) {
            return visitor.visitUnaryOpExp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.UnaryOpExpContext = UnaryOpExpContext;
class BinaryOpExpContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    XOR() { return this.tryGetToken(ExpressionAntlrParser.XOR, 0); }
    ASTERISK() { return this.tryGetToken(ExpressionAntlrParser.ASTERISK, 0); }
    SLASH() { return this.tryGetToken(ExpressionAntlrParser.SLASH, 0); }
    PERCENT() { return this.tryGetToken(ExpressionAntlrParser.PERCENT, 0); }
    PLUS() { return this.tryGetToken(ExpressionAntlrParser.PLUS, 0); }
    SUBSTRACT() { return this.tryGetToken(ExpressionAntlrParser.SUBSTRACT, 0); }
    DOUBLE_EQUAL() { return this.tryGetToken(ExpressionAntlrParser.DOUBLE_EQUAL, 0); }
    NOT_EQUAL() { return this.tryGetToken(ExpressionAntlrParser.NOT_EQUAL, 0); }
    SINGLE_AND() { return this.tryGetToken(ExpressionAntlrParser.SINGLE_AND, 0); }
    LESS_THAN() { return this.tryGetToken(ExpressionAntlrParser.LESS_THAN, 0); }
    LESS_OR_EQUAl() { return this.tryGetToken(ExpressionAntlrParser.LESS_OR_EQUAl, 0); }
    MORE_THAN() { return this.tryGetToken(ExpressionAntlrParser.MORE_THAN, 0); }
    MORE_OR_EQUAL() { return this.tryGetToken(ExpressionAntlrParser.MORE_OR_EQUAL, 0); }
    DOUBLE_AND() { return this.tryGetToken(ExpressionAntlrParser.DOUBLE_AND, 0); }
    DOUBLE_VERTICAL_CYLINDER() { return this.tryGetToken(ExpressionAntlrParser.DOUBLE_VERTICAL_CYLINDER, 0); }
    NULL_COALESCE() { return this.tryGetToken(ExpressionAntlrParser.NULL_COALESCE, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterBinaryOpExp) {
            listener.enterBinaryOpExp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBinaryOpExp) {
            listener.exitBinaryOpExp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBinaryOpExp) {
            return visitor.visitBinaryOpExp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.BinaryOpExpContext = BinaryOpExpContext;
class TripleOpExpContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    QUESTION_MARK() { return this.getToken(ExpressionAntlrParser.QUESTION_MARK, 0); }
    COLON() { return this.getToken(ExpressionAntlrParser.COLON, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterTripleOpExp) {
            listener.enterTripleOpExp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTripleOpExp) {
            listener.exitTripleOpExp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTripleOpExp) {
            return visitor.visitTripleOpExp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TripleOpExpContext = TripleOpExpContext;
class PrimaryExpContext extends ExpressionContext {
    primaryExpression() {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPrimaryExp) {
            listener.enterPrimaryExp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPrimaryExp) {
            listener.exitPrimaryExp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPrimaryExp) {
            return visitor.visitPrimaryExp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.PrimaryExpContext = PrimaryExpContext;
class PrimaryExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ExpressionAntlrParser.RULE_primaryExpression; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
exports.PrimaryExpressionContext = PrimaryExpressionContext;
class ParenthesisExpContext extends PrimaryExpressionContext {
    OPEN_BRACKET() { return this.getToken(ExpressionAntlrParser.OPEN_BRACKET, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    CLOSE_BRACKET() { return this.getToken(ExpressionAntlrParser.CLOSE_BRACKET, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterParenthesisExp) {
            listener.enterParenthesisExp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitParenthesisExp) {
            listener.exitParenthesisExp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitParenthesisExp) {
            return visitor.visitParenthesisExp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ParenthesisExpContext = ParenthesisExpContext;
class ArrayCreationExpContext extends PrimaryExpressionContext {
    OPEN_SQUARE_BRACKET() { return this.getToken(ExpressionAntlrParser.OPEN_SQUARE_BRACKET, 0); }
    CLOSE_SQUARE_BRACKET() { return this.getToken(ExpressionAntlrParser.CLOSE_SQUARE_BRACKET, 0); }
    argsList() {
        return this.tryGetRuleContext(0, ArgsListContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterArrayCreationExp) {
            listener.enterArrayCreationExp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArrayCreationExp) {
            listener.exitArrayCreationExp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArrayCreationExp) {
            return visitor.visitArrayCreationExp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ArrayCreationExpContext = ArrayCreationExpContext;
class JsonCreationExpContext extends PrimaryExpressionContext {
    OPEN_CURLY_BRACKET() { return this.getToken(ExpressionAntlrParser.OPEN_CURLY_BRACKET, 0); }
    CLOSE_CURLY_BRACKET() { return this.getToken(ExpressionAntlrParser.CLOSE_CURLY_BRACKET, 0); }
    keyValuePairList() {
        return this.tryGetRuleContext(0, KeyValuePairListContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterJsonCreationExp) {
            listener.enterJsonCreationExp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitJsonCreationExp) {
            listener.exitJsonCreationExp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitJsonCreationExp) {
            return visitor.visitJsonCreationExp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.JsonCreationExpContext = JsonCreationExpContext;
class NumericAtomContext extends PrimaryExpressionContext {
    NUMBER() { return this.getToken(ExpressionAntlrParser.NUMBER, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterNumericAtom) {
            listener.enterNumericAtom(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNumericAtom) {
            listener.exitNumericAtom(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNumericAtom) {
            return visitor.visitNumericAtom(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.NumericAtomContext = NumericAtomContext;
class StringAtomContext extends PrimaryExpressionContext {
    STRING() { return this.getToken(ExpressionAntlrParser.STRING, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterStringAtom) {
            listener.enterStringAtom(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStringAtom) {
            listener.exitStringAtom(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStringAtom) {
            return visitor.visitStringAtom(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StringAtomContext = StringAtomContext;
class IdAtomContext extends PrimaryExpressionContext {
    IDENTIFIER() { return this.getToken(ExpressionAntlrParser.IDENTIFIER, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterIdAtom) {
            listener.enterIdAtom(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdAtom) {
            listener.exitIdAtom(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIdAtom) {
            return visitor.visitIdAtom(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IdAtomContext = IdAtomContext;
class StringInterpolationAtomContext extends PrimaryExpressionContext {
    stringInterpolation() {
        return this.getRuleContext(0, StringInterpolationContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterStringInterpolationAtom) {
            listener.enterStringInterpolationAtom(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStringInterpolationAtom) {
            listener.exitStringInterpolationAtom(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStringInterpolationAtom) {
            return visitor.visitStringInterpolationAtom(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StringInterpolationAtomContext = StringInterpolationAtomContext;
class MemberAccessExpContext extends PrimaryExpressionContext {
    primaryExpression() {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    DOT() { return this.getToken(ExpressionAntlrParser.DOT, 0); }
    IDENTIFIER() { return this.getToken(ExpressionAntlrParser.IDENTIFIER, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterMemberAccessExp) {
            listener.enterMemberAccessExp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMemberAccessExp) {
            listener.exitMemberAccessExp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMemberAccessExp) {
            return visitor.visitMemberAccessExp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.MemberAccessExpContext = MemberAccessExpContext;
class FuncInvokeExpContext extends PrimaryExpressionContext {
    primaryExpression() {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    OPEN_BRACKET() { return this.getToken(ExpressionAntlrParser.OPEN_BRACKET, 0); }
    CLOSE_BRACKET() { return this.getToken(ExpressionAntlrParser.CLOSE_BRACKET, 0); }
    NON() { return this.tryGetToken(ExpressionAntlrParser.NON, 0); }
    argsList() {
        return this.tryGetRuleContext(0, ArgsListContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterFuncInvokeExp) {
            listener.enterFuncInvokeExp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFuncInvokeExp) {
            listener.exitFuncInvokeExp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFuncInvokeExp) {
            return visitor.visitFuncInvokeExp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FuncInvokeExpContext = FuncInvokeExpContext;
class IndexAccessExpContext extends PrimaryExpressionContext {
    primaryExpression() {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    OPEN_SQUARE_BRACKET() { return this.getToken(ExpressionAntlrParser.OPEN_SQUARE_BRACKET, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    CLOSE_SQUARE_BRACKET() { return this.getToken(ExpressionAntlrParser.CLOSE_SQUARE_BRACKET, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterIndexAccessExp) {
            listener.enterIndexAccessExp(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIndexAccessExp) {
            listener.exitIndexAccessExp(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIndexAccessExp) {
            return visitor.visitIndexAccessExp(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IndexAccessExpContext = IndexAccessExpContext;
class StringInterpolationContext extends ParserRuleContext_1.ParserRuleContext {
    STRING_INTERPOLATION_START(i) {
        if (i === undefined) {
            return this.getTokens(ExpressionAntlrParser.STRING_INTERPOLATION_START);
        }
        else {
            return this.getToken(ExpressionAntlrParser.STRING_INTERPOLATION_START, i);
        }
    }
    ESCAPE_CHARACTER(i) {
        if (i === undefined) {
            return this.getTokens(ExpressionAntlrParser.ESCAPE_CHARACTER);
        }
        else {
            return this.getToken(ExpressionAntlrParser.ESCAPE_CHARACTER, i);
        }
    }
    TEMPLATE(i) {
        if (i === undefined) {
            return this.getTokens(ExpressionAntlrParser.TEMPLATE);
        }
        else {
            return this.getToken(ExpressionAntlrParser.TEMPLATE, i);
        }
    }
    textContent(i) {
        if (i === undefined) {
            return this.getRuleContexts(TextContentContext);
        }
        else {
            return this.getRuleContext(i, TextContentContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ExpressionAntlrParser.RULE_stringInterpolation; }
    // @Override
    enterRule(listener) {
        if (listener.enterStringInterpolation) {
            listener.enterStringInterpolation(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStringInterpolation) {
            listener.exitStringInterpolation(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStringInterpolation) {
            return visitor.visitStringInterpolation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StringInterpolationContext = StringInterpolationContext;
class TextContentContext extends ParserRuleContext_1.ParserRuleContext {
    TEXT_CONTENT(i) {
        if (i === undefined) {
            return this.getTokens(ExpressionAntlrParser.TEXT_CONTENT);
        }
        else {
            return this.getToken(ExpressionAntlrParser.TEXT_CONTENT, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ExpressionAntlrParser.RULE_textContent; }
    // @Override
    enterRule(listener) {
        if (listener.enterTextContent) {
            listener.enterTextContent(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTextContent) {
            listener.exitTextContent(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTextContent) {
            return visitor.visitTextContent(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TextContentContext = TextContentContext;
class ArgsListContext extends ParserRuleContext_1.ParserRuleContext {
    lambda(i) {
        if (i === undefined) {
            return this.getRuleContexts(LambdaContext);
        }
        else {
            return this.getRuleContext(i, LambdaContext);
        }
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ExpressionAntlrParser.COMMA);
        }
        else {
            return this.getToken(ExpressionAntlrParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ExpressionAntlrParser.RULE_argsList; }
    // @Override
    enterRule(listener) {
        if (listener.enterArgsList) {
            listener.enterArgsList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArgsList) {
            listener.exitArgsList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArgsList) {
            return visitor.visitArgsList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ArgsListContext = ArgsListContext;
class LambdaContext extends ParserRuleContext_1.ParserRuleContext {
    IDENTIFIER() { return this.getToken(ExpressionAntlrParser.IDENTIFIER, 0); }
    ARROW() { return this.getToken(ExpressionAntlrParser.ARROW, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ExpressionAntlrParser.RULE_lambda; }
    // @Override
    enterRule(listener) {
        if (listener.enterLambda) {
            listener.enterLambda(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLambda) {
            listener.exitLambda(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLambda) {
            return visitor.visitLambda(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.LambdaContext = LambdaContext;
class KeyValuePairListContext extends ParserRuleContext_1.ParserRuleContext {
    keyValuePair(i) {
        if (i === undefined) {
            return this.getRuleContexts(KeyValuePairContext);
        }
        else {
            return this.getRuleContext(i, KeyValuePairContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ExpressionAntlrParser.COMMA);
        }
        else {
            return this.getToken(ExpressionAntlrParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ExpressionAntlrParser.RULE_keyValuePairList; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyValuePairList) {
            listener.enterKeyValuePairList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyValuePairList) {
            listener.exitKeyValuePairList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitKeyValuePairList) {
            return visitor.visitKeyValuePairList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.KeyValuePairListContext = KeyValuePairListContext;
class KeyValuePairContext extends ParserRuleContext_1.ParserRuleContext {
    key() {
        return this.getRuleContext(0, KeyContext);
    }
    COLON() { return this.getToken(ExpressionAntlrParser.COLON, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ExpressionAntlrParser.RULE_keyValuePair; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyValuePair) {
            listener.enterKeyValuePair(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyValuePair) {
            listener.exitKeyValuePair(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitKeyValuePair) {
            return visitor.visitKeyValuePair(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.KeyValuePairContext = KeyValuePairContext;
class KeyContext extends ParserRuleContext_1.ParserRuleContext {
    IDENTIFIER() { return this.tryGetToken(ExpressionAntlrParser.IDENTIFIER, 0); }
    STRING() { return this.tryGetToken(ExpressionAntlrParser.STRING, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ExpressionAntlrParser.RULE_key; }
    // @Override
    enterRule(listener) {
        if (listener.enterKey) {
            listener.enterKey(this);
        }
    }
   